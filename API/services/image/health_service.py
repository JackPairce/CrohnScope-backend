"""
Service for handling mask health status and labeled regions.

This module provides functionality to manage cell health status and
generate labeled masks separating healthy and unhealthy regions.
"""

# Generated by Copilot
import os
import cv2
import numpy as np
from sqlalchemy.orm import Session
from typing import Tuple, List
from API.db.models import Mask, HealthStatusEnum


def get_region_matrices(
    image_id: int, session: Session
) -> List[Tuple[int, int, np.ndarray, np.ndarray]]:
    """
    Get labeled regions matrix and mask matrix for each cell type in an image.
    Each mask is a numpy array where values represent:
    - 0: background
    - 1: unhealthy cells
    - 2: healthy cells

    Args:
        image_id: ID of the image
        session: Database session

    Returns:
        List of tuples, each containing:
        - mask_id: ID of the mask
        - cell_id: ID of the cell type
        - Labeled regions matrix (0: background, 1-N: unique region IDs)
        - Mask matrix (0: background, 1: unhealthy, 2: healthy)
    """
    # Get all masks for the image
    masks = session.query(Mask).filter_by(image_id=image_id).all()
    if not masks:
        raise ValueError(f"No masks found for image {image_id}")

    result = []

    for mask in masks:
        # Check if we need to convert from old PNG format
        npy_path = os.path.join(
            os.path.dirname(mask.mask_path),
            os.path.splitext(os.path.basename(mask.mask_path))[0] + ".npy",
        )

        if not os.path.exists(npy_path) and os.path.exists(mask.mask_path):
            # Convert PNG to NPY
            mask_img = cv2.imread(mask.mask_path, cv2.IMREAD_GRAYSCALE)
            if mask_img is not None:
                binary_mask = (mask_img > 0).astype(np.uint8)
                np.save(npy_path, binary_mask)
                # Update path in database
                mask.mask_path = npy_path
                session.commit()

        # Load the mask from npy file
        try:
            mask_array = np.load(npy_path)
        except:
            print(f"Error loading mask {mask.mask_path}, skipping...")
            continue

        # Get labeled regions
        _, labels = cv2.connectedComponents((mask_array > 0).astype(np.uint8))

        # Create a new label matrix for this mask with continuous IDs
        new_labels = np.zeros_like(labels)
        current_id = 0  # Start from 0 for background

        # For each region in the mask, assign a new ID
        for region_id in range(1, labels.max() + 1):
            current_id += 1
            region_mask = labels == region_id
            new_labels[region_mask] = current_id

        result.append((mask.id, mask.cell_id, new_labels, mask_array))

    return result


def update_region_health(
    mask_id: int, region_id: int, health_status: HealthStatusEnum, session: Session
) -> bool:
    """
    Update the health status of a specific region in a mask.
    Directly modifies the numpy array:
    - 0: background
    - 1: unhealthy cells
    - 2: healthy cells

    Args:
        mask_id: ID of the mask
        region_id: ID of the region within the mask
        health_status: New health status (healthy/unhealthy)
        session: Database session

    Returns:
        bool indicating success
    """
    mask = session.query(Mask).filter_by(id=mask_id).first()
    if not mask:
        raise ValueError(f"Mask {mask_id} not found")

    npy_path = os.path.join(
        os.path.dirname(mask.mask_path),
        os.path.splitext(os.path.basename(mask.mask_path))[0] + ".npy",
    )

    # Load the mask data
    if not os.path.exists(npy_path) and os.path.exists(mask.mask_path):
        # Convert PNG to NPY
        mask_img = cv2.imread(mask.mask_path, cv2.IMREAD_GRAYSCALE)
        if mask_img is not None:
            binary_mask = (mask_img > 0).astype(np.uint8)
            np.save(npy_path, binary_mask)
            # Update path in database
            mask.mask_path = npy_path
            session.commit()

    # Load the mask data
    mask_array = np.load(npy_path)

    # Get region labels
    _, labels = cv2.connectedComponents((mask_array > 0).astype(np.uint8))

    # Update the region's health status in the array
    region_mask = labels == region_id
    if health_status == HealthStatusEnum.healthy:
        mask_array[region_mask] = 2
    else:
        mask_array[region_mask] = 1

    # Save the updated array
    np.save(mask.mask_path, mask_array)

    # Update the mask status in the database based on majority
    healthy_count = np.sum(mask_array == 2)
    unhealthy_count = np.sum(mask_array == 1)
    mask.health_status = (
        HealthStatusEnum.healthy
        if healthy_count > unhealthy_count
        else HealthStatusEnum.unhealthy
    )

    session.commit()
    return True

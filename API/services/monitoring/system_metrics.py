"""
System monitoring service for collecting system metrics and information.

This module provides functionality to collect various system metrics including
CPU, memory, GPU, storage, and other system information.
"""

# Generated by Copilot
import os
import psutil
import platform
import torch
from datetime import datetime
from typing import Dict, Optional, List
from app.types.monitor import (
    DataDirectoryInfo,
    DatasetInfo,
    SystemInfo,
    CpuInfo,
    MemoryInfo,
    GpuInfo,
    StorageInfo,
    DiskInfo,
    SystemMetrics,
    SystemResponse,
    DataUsageResponse,
    DatasetBreakdown,
    DirectoryStats,
    ModelInfo,
    DataUsageBreakdown,
)


def get_size(bytes: float, suffix: str = "B") -> str:
    """Convert bytes to human readable format."""
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f} {unit}{suffix}"
        bytes /= factor
    return f"{bytes:.2f} P{suffix}"


def get_dir_size(path: str) -> int:
    """Get total size of a directory recursively."""
    total = 0
    with os.scandir(path) as it:
        for entry in it:
            if entry.is_file():
                total += entry.stat().st_size
            elif entry.is_dir():
                total += get_dir_size(entry.path)
    return total


def get_system_metrics() -> SystemMetrics:
    """Get real-time system metrics (CPU, Memory, GPU)."""
    # CPU Information
    cpu_freq = psutil.cpu_freq()
    temperatures = {}
    try:
        temps = psutil.sensors_temperatures()
        if temps:
            cpu_temps = temps.get("coretemp", []) or temps.get(
                "k10temp", []
            )  # Intel or AMD
            if cpu_temps:
                for idx, temp in enumerate(cpu_temps):
                    temperatures[f"core_{idx}"] = temp.current
    except (AttributeError, KeyError):
        pass

    cpu_info = CpuInfo(
        physical_cores=psutil.cpu_count(logical=False) or 0,
        total_cores=psutil.cpu_count(logical=True) or 0,
        max_frequency=f"{cpu_freq.max:.2f}Mhz",
        current_frequency=f"{cpu_freq.current:.2f}Mhz",
        usage_per_core=[
            f"{percentage:.1f}%"
            for percentage in psutil.cpu_percent(percpu=True, interval=0.1)
        ],
        total_usage=f"{psutil.cpu_percent(interval=0.1)}%",
        temperatures=temperatures if temperatures else None,
    )

    # Memory Information
    svmem = psutil.virtual_memory()
    memory_info = MemoryInfo(
        total=get_size(svmem.total),
        available=get_size(svmem.available),
        used=get_size(svmem.used),
        percentage=f"{svmem.percent}%",
    )

    # GPU Information (if CUDA is available)
    gpu_info = None
    if torch.cuda.is_available():
        gpu_info = GpuInfo(
            gpu_count=torch.cuda.device_count(),
            current_device=torch.cuda.current_device(),
            device_name=torch.cuda.get_device_name(0),
            memory_allocated=get_size(torch.cuda.memory_allocated(0)),
            memory_reserved=get_size(torch.cuda.memory_reserved(0)),
        )

    return SystemMetrics(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        cpu=cpu_info,
        memory=memory_info,
        gpu=gpu_info,
    )


def get_system_info() -> SystemResponse:
    """Get static system information."""
    # System Information
    uname = platform.uname()
    system_info = SystemInfo(
        system=uname.system,
        node_name=uname.node,
        release=uname.release,
        version=uname.version,
        machine=uname.machine,
        processor=uname.processor,
        uptime=datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S"),
    )

    # Storage Information
    data_path = "data/"
    dataset_path = os.path.join(data_path, "dataset")
    images_path = os.path.join(dataset_path, "images")
    masks_path = os.path.join(dataset_path, "masks")

    # Create directories if they don't exist
    for path in [data_path, dataset_path, images_path, masks_path]:
        os.makedirs(path, exist_ok=True)

    storage_info = StorageInfo(
        data_directory=DataDirectoryInfo(
            path="data/",
            total_size=get_size(get_dir_size("data/")),
            max_size="5GB",
            dataset=DatasetInfo(
                images=len(
                    [
                        f
                        for f in os.listdir(images_path)
                        if os.path.isfile(os.path.join(images_path, f))
                    ]
                ),
                masks=len(
                    [
                        f
                        for f in os.listdir(masks_path)
                        if os.path.isdir(os.path.join(masks_path, f))
                    ]
                ),
            ),
        )
    )

    # Disk Information
    disk = psutil.disk_usage("/")
    disk_info = DiskInfo(
        total=get_size(disk.total),
        used=get_size(disk.used),
        free=get_size(disk.free),
        percentage=f"{disk.percent}%",
    )

    return SystemResponse(
        timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        system=system_info,
        storage=storage_info,
        disk=disk_info,
    )


def get_data_usage() -> DataUsageResponse:
    """Get detailed information about data directory usage."""
    data_path = "data/"
    dataset_path = os.path.join(data_path, "dataset")
    images_path = os.path.join(dataset_path, "images")
    masks_path = os.path.join(dataset_path, "masks")
    models_path = os.path.join(data_path, "models")

    # Create directories if they don't exist
    for path in [data_path, dataset_path, images_path, masks_path, models_path]:
        os.makedirs(path, exist_ok=True)

    total_size = get_dir_size(data_path)

    # Dataset breakdown
    dataset = DatasetBreakdown(
        total_size=get_size(get_dir_size(dataset_path)),
        images=DirectoryStats(
            count=len(
                [
                    f
                    for f in os.listdir(images_path)
                    if os.path.isfile(os.path.join(images_path, f))
                ]
            ),
            size=get_size(get_dir_size(images_path)),
        ),
        masks=DirectoryStats(
            count=len(
                [
                    f
                    for f in os.listdir(masks_path)
                    if os.path.isdir(os.path.join(masks_path, f))
                ]
            ),
            size=get_size(get_dir_size(masks_path)),
        ),
    )

    # Models info
    models = ModelInfo(
        size=get_size(get_dir_size(models_path)),
        files=[
            f
            for f in os.listdir(models_path)
            if os.path.isfile(os.path.join(models_path, f))
        ],
    )

    breakdown = DataUsageBreakdown(dataset=dataset, models=models)

    return DataUsageResponse(
        total_usage=get_size(total_size),
        max_size="5GB",
        percentage_used=f"{(total_size / (5 * 1024 * 1024 * 1024)) * 100:.2f}%",
        breakdown=breakdown,
    )

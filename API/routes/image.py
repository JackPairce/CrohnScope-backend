"""
Image routes module for handling image-related HTTP endpoints.
"""

# Generated by Copilot
from typing import Literal, Optional
from fastapi import APIRouter, HTTPException, Query
from API.db.session import SessionLocal
from shared.types.image import (
    ApiImage,
    ImageStatus,
    ImageListResponse,
    UploadImageRequest,
    process_type,
)
from API.services.image import image_service
from shared.utils.converters import ToBase64

router = APIRouter()
PAGE_SIZE = 10


@router.get("/status", response_model=ImageStatus)
def get_status() -> ImageStatus:
    """Get the status of the image service."""
    return ImageStatus(status="image service is ready")


@router.get("/all/{page}", response_model=ImageListResponse)
def get_images_all(page: int) -> ImageListResponse:
    """
    Get a paginated list of all images.

    Args:
        page: Page number
    """
    session = SessionLocal()
    try:
        db_images_count = session.query(image_service.Image).count()
        db_images = (
            session.query(image_service.Image)
            .offset((page - 1) * PAGE_SIZE)
            .limit(PAGE_SIZE)
            .all()
        )
        return ImageListResponse(
            images=[
                ApiImage(
                    id=img.id,
                    filename=img.filename,
                    src=ToBase64(img.img_path),
                    is_done=False,  # Default to False, can be updated later
                )
                for img in db_images
            ],
            page=page,
            total=db_images_count,
        )
    finally:
        session.close()


@router.get("/which_all/{page}", response_model=ImageListResponse)
def get_images(
    page: int,
    which: process_type = Query(),
    done: Optional[Literal["0", "1"]] = Query(None),
) -> ImageListResponse:
    """
    Get a paginated list of images.

    Args:
        page: Page number
        done: Filter by completion status (0 for incomplete, 1 for complete)
    """
    session = SessionLocal()
    try:
        db_images, db_count = image_service.get_images_by_done_status(
            session,
            (int(done) if done else 0),
            which,
            offset=(page - 1) * PAGE_SIZE,
            limit=PAGE_SIZE,
        )

        api_images = [
            ApiImage(
                id=img.id,
                filename=img.filename,
                src=ToBase64(img.img_path),
                is_done=False,
            )
            for img in db_images
        ]
        return ImageListResponse(images=api_images, page=page, total=db_count)
    finally:
        session.close()


@router.post("/upload", response_model=ApiImage)
def upload_image(image_data: UploadImageRequest) -> ApiImage:
    """Upload a new image."""
    session = SessionLocal()
    try:
        return image_service.upload_image(session, image_data)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.delete("/delete/{image_id}")
def delete_image(image_id: int):
    """Delete an image and its associated files."""
    session = SessionLocal()
    try:
        image_service.delete_image(session, image_id)
        return {"message": "Image deleted successfully"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()

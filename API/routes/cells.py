"""
Cell routes module for handling cell-related HTTP endpoints.
"""

# Generated by Copilot
from typing import List
from fastapi import APIRouter, HTTPException
from API.db.session import SessionLocal
from shared.types.cell import (
    ApiCell,
    CellTypeCreateResponse,
    CellTypeDeleteResponse,
    CellTypeUpdateResponse,
)
from API.services.cell import cell_service

router = APIRouter()


@router.get("/", response_model=List[ApiCell])
def get_all_cells() -> List[ApiCell]:
    """Get all cell types in the database."""
    session = SessionLocal()
    try:
        return cell_service.get_all_cells(session)
    finally:
        session.close()


@router.get("/get/{image_id}")
def get_cells() -> List[ApiCell]:
    """Compatibility method for existing code - get all cells."""
    session = SessionLocal()
    try:
        return cell_service.get_all_cells(session)
    finally:
        session.close()


@router.get("/{cell_id}", response_model=ApiCell)
def get_cell(cell_id: int) -> ApiCell:
    """Get a specific cell by ID."""
    session = SessionLocal()
    try:
        cell = cell_service.get_cell_by_id(session, cell_id)
        if cell is None:
            raise HTTPException(status_code=404, detail="Cell not found")
        return cell
    finally:
        session.close()


@router.post("/save/{image_id}", response_model=CellTypeCreateResponse)
def add_cell(inCell: ApiCell) -> CellTypeCreateResponse:
    """Legacy method for compatibility with existing code."""
    session = SessionLocal()
    try:
        try:
            cell = cell_service.create_cell(session, inCell)
            return CellTypeCreateResponse(
                message="Cell added successfully", cell_type=cell
            )
        except ValueError:
            # If cell already exists, return it
            existing = cell_service.get_all_cells(session)
            cell = next((c for c in existing if c.name == inCell.name), None)
            if cell:
                return CellTypeCreateResponse(
                    message="Cell already exists", cell_type=cell
                )
            raise  # Re-raise if not found
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.put("/{cell_id}", response_model=CellTypeUpdateResponse)
def update_cell(cell_id: int, cell: ApiCell) -> CellTypeUpdateResponse:
    """Update an existing cell type."""
    session = SessionLocal()
    try:
        updated_cell = cell_service.update_cell(
            session, cell_id, cell.name, cell.description
        )
        return CellTypeUpdateResponse(cell_type=updated_cell)
    except ValueError as e:
        if "not found" in str(e):
            raise HTTPException(status_code=404, detail=str(e))
        else:
            raise HTTPException(status_code=400, detail=str(e))
    finally:
        session.close()


@router.delete("/{cell_id}", response_model=CellTypeDeleteResponse)
def delete_cell(cell_id: int) -> CellTypeDeleteResponse:
    """Delete a cell type and its associated masks."""
    session = SessionLocal()
    try:
        result = cell_service.delete_cell(session, cell_id)
        return CellTypeDeleteResponse(
            id=result["id"],
            message=f"Cell deleted successfully ({result['masks_deleted']} masks deleted)",
        )
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    finally:
        session.close()

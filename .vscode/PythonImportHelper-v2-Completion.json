[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "Mask",
        "importPath": "shared.types.image",
        "description": "shared.types.image",
        "isExtraImport": true,
        "detail": "shared.types.image",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ai",
        "importPath": "API.api.routes",
        "description": "API.api.routes",
        "isExtraImport": true,
        "detail": "API.api.routes",
        "documentation": {}
    },
    {
        "label": "data",
        "importPath": "API.api.routes",
        "description": "API.api.routes",
        "isExtraImport": true,
        "detail": "API.api.routes",
        "documentation": {}
    },
    {
        "label": "image",
        "importPath": "API.api.routes",
        "description": "API.api.routes",
        "isExtraImport": true,
        "detail": "API.api.routes",
        "documentation": {}
    },
    {
        "label": "get_model_status",
        "kind": 2,
        "importPath": "API.api.routes.ai",
        "description": "API.api.routes.ai",
        "peekOfCode": "def get_model_status():\n    return {\"status\": \"AI model is ready\"}",
        "detail": "API.api.routes.ai",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "API.api.routes.ai",
        "description": "API.api.routes.ai",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/status\")\ndef get_model_status():\n    return {\"status\": \"AI model is ready\"}",
        "detail": "API.api.routes.ai",
        "documentation": {}
    },
    {
        "label": "CellState",
        "kind": 6,
        "importPath": "API.api.routes.data",
        "description": "API.api.routes.data",
        "peekOfCode": "class CellState(Enum):\n    Healthy = \"healthy\"\n    Unhealthy = \"unhealthy\"\n@router.get(\"/status\")\ndef get_model_status():\n    return {\"status\": \"data service is ready\"}",
        "detail": "API.api.routes.data",
        "documentation": {}
    },
    {
        "label": "get_model_status",
        "kind": 2,
        "importPath": "API.api.routes.data",
        "description": "API.api.routes.data",
        "peekOfCode": "def get_model_status():\n    return {\"status\": \"data service is ready\"}",
        "detail": "API.api.routes.data",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "API.api.routes.data",
        "description": "API.api.routes.data",
        "peekOfCode": "router = APIRouter()\nclass CellState(Enum):\n    Healthy = \"healthy\"\n    Unhealthy = \"unhealthy\"\n@router.get(\"/status\")\ndef get_model_status():\n    return {\"status\": \"data service is ready\"}",
        "detail": "API.api.routes.data",
        "documentation": {}
    },
    {
        "label": "ConnectedComponents",
        "kind": 2,
        "importPath": "API.api.routes.image",
        "description": "API.api.routes.image",
        "peekOfCode": "def ConnectedComponents(mask: str):\n    print(mask)\n    return mask\n    # binary = cv2.threshold(mask.matrix, 127, 255, cv2.THRESH_BINARY)[1]\n    # _, labels_im = cv2.connectedComponents(binary)\n    # return labels_im.tolist()",
        "detail": "API.api.routes.image",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "API.api.routes.image",
        "description": "API.api.routes.image",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/cc\")\ndef ConnectedComponents(mask: str):\n    print(mask)\n    return mask\n    # binary = cv2.threshold(mask.matrix, 127, 255, cv2.THRESH_BINARY)[1]\n    # _, labels_im = cv2.connectedComponents(binary)\n    # return labels_im.tolist()",
        "detail": "API.api.routes.image",
        "documentation": {}
    },
    {
        "label": "Mask",
        "kind": 6,
        "importPath": "shared.types.image",
        "description": "shared.types.image",
        "peekOfCode": "class Mask(BaseModel):\n    matrix: List[List[int]] = []\n    # def __init__(self, array: MatLike):\n    #     self.matrix = array\n    # def tonumpy(self):\n    #     return np.array(self.matrix, dtype=np.uint8)",
        "detail": "shared.types.image",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "API.main",
        "description": "API.main",
        "peekOfCode": "app = FastAPI()\nAPI.include_router(ai.router, prefix=\"/ai\")\nAPI.include_router(data.router, prefix=\"/data\")\nAPI.include_router(image.router, prefix=\"/image\")",
        "detail": "API.main",
        "documentation": {}
    }
]
"""
Cell service module for handling cell type operations.

This module handles cell CRUD operations and related business logic.
"""

# Generated by Copilot
import os
from typing import List, Optional
from sqlalchemy.orm import Session
from app.db.models import Cell, Mask
from app.types.image import ApiCell


def get_all_cells(session: Session) -> List[ApiCell]:
    """
    Get all cell types in the database.

    Args:
        session: Database session

    Returns:
        List of ApiCell objects
    """
    cells = session.query(Cell).all()
    return [
        ApiCell(id=cell.id, name=cell.name, description=cell.description)
        for cell in cells
    ]


def get_cell_by_id(session: Session, cell_id: int) -> Optional[ApiCell]:
    """
    Get a specific cell by ID.

    Args:
        session: Database session
        cell_id: ID of the cell to get

    Returns:
        ApiCell object or None if not found
    """
    cell = session.query(Cell).filter(Cell.id == cell_id).first()
    if not cell:
        return None

    return ApiCell(id=cell.id, name=cell.name, description=cell.description)


def create_cell(
    session: Session, name: str, description: Optional[str] = None
) -> ApiCell:
    """
    Create a new cell type.

    Args:
        session: Database session
        name: Name of the cell type
        description: Optional description

    Returns:
        ApiCell object

    Raises:
        ValueError: If cell with same name exists
    """
    # Check if a cell with the same name already exists
    existing = session.query(Cell).filter(Cell.name == name).first()
    if existing:
        raise ValueError("Cell with this name already exists")

    db_cell = Cell(name=name, description=description)
    session.add(db_cell)
    session.commit()
    session.refresh(db_cell)

    return ApiCell(id=db_cell.id, name=db_cell.name, description=db_cell.description)


def update_cell(
    session: Session,
    cell_id: int,
    name: Optional[str] = None,
    description: Optional[str] = None,
) -> ApiCell:
    """
    Update an existing cell type.

    Args:
        session: Database session
        cell_id: ID of the cell to update
        name: Optional new name
        description: Optional new description

    Returns:
        Updated ApiCell object

    Raises:
        ValueError: If cell not found or name already exists
    """
    db_cell = session.query(Cell).filter(Cell.id == cell_id).first()
    if not db_cell:
        raise ValueError("Cell not found")

    # Update fields if provided
    if name is not None:
        # Check if another cell with the same name exists
        if name != db_cell.name:
            existing = session.query(Cell).filter(Cell.name == name).first()
            if existing:
                raise ValueError("Cell with this name already exists")
        db_cell.name = name

    if description is not None:
        db_cell.description = description

    session.commit()
    session.refresh(db_cell)

    return ApiCell(id=db_cell.id, name=db_cell.name, description=db_cell.description)


def delete_cell(session: Session, cell_id: int) -> dict:
    """
    Delete a cell type and its associated masks.

    Args:
        session: Database session
        cell_id: ID of the cell to delete

    Returns:
        dict with deletion info

    Raises:
        ValueError: If cell not found
    """
    # Check if the cell exists
    cell = session.query(Cell).filter(Cell.id == cell_id).first()
    if not cell:
        raise ValueError("Cell not found")

    # Get associated masks
    masks = session.query(Mask).filter(Mask.cell_id == cell_id).all()
    deleted_masks = 0

    # Delete associated masks if any
    if masks:
        # First delete the mask records
        for mask in masks:
            # Delete the mask file if it exists
            if mask.mask_path and os.path.exists(mask.mask_path):
                try:
                    os.remove(mask.mask_path)
                    deleted_masks += 1
                except Exception as e:
                    print(f"Error deleting mask file {mask.mask_path}: {e}")
            # Delete the database record
            session.delete(mask)

    # Delete the cell
    session.delete(cell)
    session.commit()

    return {"id": cell_id, "masks_deleted": deleted_masks}

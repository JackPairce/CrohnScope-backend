"""
Mask service module for handling mask operations.

This module handles mask CRUD operations and related business logic.
"""

# Generated by Copilot
import os
from typing import List, Optional
from sqlalchemy.orm import Session
from app.db.models import Image, Mask, Cell
from app.types.image import ApiMask, SaveMaskResponse
from utils.converters import ToBase64, base64_to_file
from app.services.image.mask_tracker import record_mask_modification


def get_masks(session: Session, image_id: int) -> List[ApiMask]:
    """
    Get all masks for a specific image.

    Args:
        session: Database session
        image_id: ID of the image to get masks for

    Returns:
        List of ApiMask objects
    """
    masks = session.query(Mask).filter_by(image_id=image_id).all()
    return [
        ApiMask(
            id=mask.id,
            image_id=mask.image_id,
            mask_path=mask.mask_path,
            src=ToBase64(mask.mask_path),
            cell_id=mask.cell_id,
            is_mask_done=not not (mask.is_mask_done),
        )
        for mask in masks
    ]


def save_mask_for_cell(
    session: Session, image_id: int, cell_id: int, mask_data: SaveMaskResponse
) -> bool:
    """
    Save a mask for a specific cell type.

    Args:
        session: Database session
        image_id: ID of the image the mask belongs to
        cell_id: ID of the cell type
        mask_data: Mask data including base64 image

    Returns:
        bool: True if save was successful

    Raises:
        ValueError: If image or cell not found
    """
    # Get image and cell
    image = session.query(Image).filter_by(id=image_id).first()
    cell = session.query(Cell).filter_by(id=cell_id).first()

    if not image or not cell:
        raise ValueError(f"Image ID {image_id} or Cell ID {cell_id} not found")

    # Create mask directory structure
    name = os.path.splitext(image.filename)[0]
    mask_dir = os.path.join("data/dataset/masks", name)
    os.makedirs(mask_dir, exist_ok=True)

    # Define output path for the mask
    ext = os.path.splitext(image.filename)[1]
    mask_path = os.path.join(mask_dir, f"{cell.name}{ext}")

    # Save the mask file
    base64_to_file(mask_data["src"], mask_path)

    # Update or create the database record
    db_mask = session.query(Mask).filter_by(id=mask_data.get("id")).first()
    if db_mask:
        db_mask.mask_path = mask_path
        db_mask.is_mask_done = 0  # Reset done status on update
        # Record mask modification for AI training
        record_mask_modification(image_id, cell_id)
    else:
        db_mask = Mask(
            image_id=image_id, mask_path=mask_path, cell_id=cell_id, is_mask_done=0
        )
        session.add(db_mask)

    session.commit()
    return True


def save_masks(session: Session, image_id: int, masks: List[SaveMaskResponse]) -> bool:
    """
    Save multiple masks for an image.

    Args:
        session: Database session
        image_id: ID of the image the masks belong to
        masks: List of mask data

    Returns:
        bool: True if all saves were successful

    Raises:
        ValueError: If image not found
    """
    # Check image exists
    image = session.query(Image).filter_by(id=image_id).first()
    if not image:
        raise ValueError(f"Image ID {image_id} not found")

    # Save each mask
    for mask in masks:
        save_mask_for_cell(session, image_id, mask["cell_id"], mask)

    return True


def mark_mask_done(session: Session, mask_id: int) -> bool:
    """
    Mark a mask as done.

    Args:
        session: Database session
        mask_id: ID of the mask to mark as done

    Returns:
        bool: True if successful

    Raises:
        ValueError: If mask not found
    """
    db_mask = session.query(Mask).filter_by(id=mask_id).first()
    if not db_mask:
        raise ValueError("Mask not found")

    db_mask.is_mask_done = 1
    session.commit()
    return True


def alternate_masks(session: Session, image_id: int, mask1: str, mask2: str) -> bool:
    """
    Alternate (swap) two masks for an image.

    Args:
        session: Database session
        image_id: ID of the image
        mask1: First mask filename
        mask2: Second mask filename

    Returns:
        bool: True if successful

    Raises:
        ValueError: If masks or directory not found
    """
    # Find the mask directory
    mask_dir = os.path.join("data/dataset/masks", os.path.splitext(str(image_id))[0])
    if not os.path.exists(mask_dir):
        raise ValueError("Mask directory not found")

    # Alternate the mask names
    mask1_path = os.path.join(mask_dir, mask1)
    mask2_path = os.path.join(mask_dir, mask2)
    if not os.path.exists(mask1_path) or not os.path.exists(mask2_path):
        raise ValueError("One or both masks not found")

    temp_path = os.path.join(mask_dir, "temp_mask")
    os.rename(mask1_path, temp_path)
    os.rename(mask2_path, mask1_path)
    os.rename(temp_path, mask2_path)

    return True

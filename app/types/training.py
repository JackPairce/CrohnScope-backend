# Generated by Copilot
from pydantic import BaseModel, Field
from typing import Optional, Union, Dict, Any, List
from enum import Enum
import time


class TrainingStatusEnum(str, Enum):
    """Enum for training process status values."""

    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    SKIPPED = "skipped"
    NOT_RUNNING = "not_running"
    UNKNOWN = "unknown"


class ProcessInfo(BaseModel):
    """Model for training process information with strict typing."""

    pid: Optional[int] = None
    status: TrainingStatusEnum = TrainingStatusEnum.NOT_RUNNING
    start_time: float = Field(default_factory=time.time)
    last_update: float = Field(default_factory=time.time)
    error: Optional[str] = None
    # Optional additional fields
    resources: Optional[Dict[str, Any]] = None
    progress: Optional[float] = None
    current_epoch: Optional[int] = None
    total_epochs: Optional[int] = None
    loss: Optional[float] = None

    class Config:
        use_enum_values = True  # Store enum as string value
        extra = "allow"  # Allow additional fields


class TrainingProcessResponse(BaseModel):
    """Response model for training process status API endpoint."""

    status: TrainingStatusEnum
    pid: Optional[int] = None
    start_time: Optional[float] = None
    last_update: Optional[float] = None
    error: Optional[str] = None
    resources: Optional[Dict[str, Any]] = None
    elapsed_seconds: Optional[float] = None
    log: Optional[List[str]] = None

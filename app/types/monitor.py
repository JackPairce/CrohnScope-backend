"""
Pydantic models for system monitoring types.

This module defines the data models used for system monitoring and metrics.
"""

# Generated by Copilot
from typing import Dict, List, Optional
from pydantic import BaseModel, Field


class SystemInfo(BaseModel):
    system: str
    node_name: str
    release: str
    version: str
    machine: str
    processor: str
    uptime: str


class CpuInfo(BaseModel):
    physical_cores: int
    total_cores: int
    max_frequency: str
    current_frequency: str
    usage_per_core: List[str]
    total_usage: str
    temperatures: Optional[Dict[str, float]] = Field(
        None, description="CPU temperatures in Celsius"
    )


class MemoryInfo(BaseModel):
    total: str
    available: str
    used: str
    percentage: str


class GpuInfo(BaseModel):
    gpu_count: int
    current_device: int
    device_name: str
    memory_allocated: str
    memory_reserved: str


class DatasetInfo(BaseModel):
    images: int
    masks: int


class DataDirectoryInfo(BaseModel):
    path: str
    total_size: str
    max_size: str
    dataset: DatasetInfo


class StorageInfo(BaseModel):
    data_directory: DataDirectoryInfo


class DiskInfo(BaseModel):
    total: str
    used: str
    free: str
    percentage: str


class SystemMetrics(BaseModel):
    timestamp: str
    cpu: CpuInfo
    memory: MemoryInfo
    gpu: Optional[GpuInfo]


class SystemResponse(BaseModel):
    timestamp: str
    system: SystemInfo
    storage: StorageInfo
    disk: DiskInfo


class DirectoryStats(BaseModel):
    count: int
    size: str


class DatasetBreakdown(BaseModel):
    total_size: str
    images: DirectoryStats
    masks: DirectoryStats


class ModelInfo(BaseModel):
    size: str
    files: List[str]


class DataUsageBreakdown(BaseModel):
    dataset: DatasetBreakdown
    models: ModelInfo


class DataUsageResponse(BaseModel):
    total_usage: str
    max_size: str
    percentage_used: str
    breakdown: DataUsageBreakdown

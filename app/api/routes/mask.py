"""
Mask routes module for handling mask-related HTTP endpoints.
"""

# Generated by Copilot
from typing import List, TypedDict
from fastapi import APIRouter, Body, HTTPException
from app.db.session import SessionLocal
from app.types.image import ApiMask, SaveMaskResponse
from app.services.image import mask_service

router = APIRouter()


@router.get("/get/{image_id}")
def get_masks(image_id: int) -> List[ApiMask]:
    """
    Get all masks for a specific image.

    Args:
        image_id: ID of the image to get masks for
    """
    session = SessionLocal()
    try:
        return mask_service.get_masks(session, image_id)
    finally:
        session.close()


@router.post("/save/{image_id}")
def save_masks(image_id: int, body: List[SaveMaskResponse] = Body(...)):
    """
    Save masks for an image.

    Args:
        image_id: ID of the image to save masks for
        body: List of masks to save
    """
    session = SessionLocal()
    try:
        mask_service.save_masks(session, image_id, body)
        return {"message": "Masks saved successfully"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.put("/done/{mask_id}")
def mark_mask_done(mask_id: int):
    """
    Mark a mask as done.

    Args:
        mask_id: ID of the mask to mark as done
    """
    session = SessionLocal()
    try:
        mask_service.mark_mask_done(session, mask_id)
        return {"message": "Mask marked as done"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.post("/alternate")
def alternate_masks(image_id: int, mask1: str, mask2: str):
    """
    Alternate (swap) two masks for an image.

    Args:
        image_id: ID of the image
        mask1: First mask filename
        mask2: Second mask filename
    """
    session = SessionLocal()
    try:
        mask_service.alternate_masks(session, image_id, mask1, mask2)
        return {"message": "Masks alternated successfully"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()

"""
Mask routes module for handling mask-related HTTP endpoints.
"""

# Generated by Copilot
from typing import List
from fastapi import APIRouter, Body, HTTPException
import base64
import cv2
import numpy as np
from app.db.session import SessionLocal
from app.types.image import (
    ApiMask,
    MaskAnnotationResponse,
    MaskUpdateResponse,
    RegionInfo,
    LabeledMaskResponse,
    MaskMatrix,
    MaskMatricesResponse,
    SaveMaskResponse,
)
from app.db.models import HealthStatusEnum
from app.services.image import mask_service, region_service, health_service

router = APIRouter()


@router.get("/get/{image_id}", response_model=List[ApiMask])
def get_masks(image_id: int) -> List[ApiMask]:
    """
    Get all masks for a specific image.

    Args:
        image_id: ID of the image to get masks for
    """
    session = SessionLocal()
    try:
        return mask_service.get_masks(session, image_id)
    finally:
        session.close()


@router.post("/save/{image_id}")
def save_masks(image_id: int, body: List[SaveMaskResponse] = Body(...)):
    """
    Save masks for an image.

    Args:
        image_id: ID of the image to save masks for
        body: List of masks to save
    """
    session = SessionLocal()
    try:
        mask_service.save_masks(session, image_id, body)
        return {"message": "Masks saved successfully"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.put("/done/{mask_id}", response_model=MaskUpdateResponse)
def mark_mask_done(mask_id: int) -> MaskUpdateResponse:
    """
    Mark a mask as done.

    Args:
        mask_id: ID of the mask to mark as done
    """
    session = SessionLocal()
    try:
        mask_service.mark_mask_done(session, mask_id)
        return MaskUpdateResponse(message="Mask marked as done")
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.put("/annotate/{mask_id}", response_model=MaskAnnotationResponse)
def mark_mask_annotated(mask_id: int) -> MaskAnnotationResponse:
    """
    Mark a mask as annotated.

    Args:
        mask_id: ID of the mask to mark as annotated
    """
    session = SessionLocal()
    try:
        mask_service.mark_mask_annotated(session, mask_id)
        return MaskAnnotationResponse(message="Mask marked as annotated")
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.post("/alternate")
def alternate_masks(image_id: int, mask1: str, mask2: str):
    """
    Alternate (swap) two masks for an image.

    Args:
        image_id: ID of the image
        mask1: First mask filename
        mask2: Second mask filename
    """
    session = SessionLocal()
    try:
        mask_service.alternate_masks(session, image_id, mask1, mask2)
        return {"message": "Masks alternated successfully"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.post("/regions")
def get_labeled_regions(mask_data: str = Body(..., embed=True)) -> LabeledMaskResponse:
    """
    Get a labeled version of a mask where each connected region has a unique ID.

    Args:
        mask_data: Base64 encoded mask image

    Returns:
        LabeledMaskResponse containing:
        - labeled_mask: Base64 encoded image where each region has a unique color
        - regions: List of region statistics including area, bounding box, and centroid
    """
    try:
        labeled_mask, region_dicts = region_service.label_connected_components(
            mask_data
        )
        region_info = [
            RegionInfo(
                id=r["id"],
                area=r["area"],
                boundingBox=r["boundingBox"],
                centroid=r["centroid"],
            )
            for r in region_dicts
        ]
        return LabeledMaskResponse(labeledMask=labeled_mask, regions=region_info)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/matrices/{image_id}")
def get_mask_matrices(image_id: int) -> MaskMatricesResponse:
    """
    Get labeled regions matrix and health status matrices for an image.

    Args:
        image_id: ID of the image

    Returns:
        MaskMatricesResponse containing:
        - masks: List of MaskMatrix objects, each containing:
            - mask_id: ID of the mask
            - cell_id: ID of the cell type
            - labeledRegions: Matrix where each region has a unique ID
            - mask: Matrix where 0: background, 1: unhealthy, 2: healthy
    """
    session = SessionLocal()
    try:
        # Get the matrices
        matrix_tuples = health_service.get_region_matrices(image_id, session)

        # Convert matrices to response format
        masks = [
            MaskMatrix(
                mask_id=mask_id,
                cell_id=cell_id,
                labeledRegions=labeled_regions.tolist(),
                mask=mask_matrix.tolist(),
            )
            for mask_id, cell_id, labeled_regions, mask_matrix in matrix_tuples
        ]

        return MaskMatricesResponse(masks=masks)
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.put("/region-health/{mask_id}/{region_id}")
def update_region_health_status(
    mask_id: int, region_id: int, health_status: HealthStatusEnum
):
    """
    Update the health status of a specific region in a mask.

    Args:
        mask_id: ID of the mask
        region_id: ID of the region
        health_status: New health status (healthy/unhealthy)
    """
    session = SessionLocal()
    try:
        health_service.update_region_health(mask_id, region_id, health_status, session)
        return {"message": "Region health status updated successfully"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()

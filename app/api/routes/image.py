"""
Image routes module for handling image-related HTTP endpoints.
"""

# Generated by Copilot
from typing import List, Literal, Optional, TypedDict
from fastapi import APIRouter, HTTPException, Query
from app.db.session import SessionLocal
from app.types.image import ApiImage
from app.services.image import image_service

router = APIRouter()


class ImageListResponse(TypedDict):
    images: List[ApiImage]
    page: int
    total: int


@router.get("/status")
def get_status():
    """Get the status of the image service."""
    return {"status": "image service is ready"}


@router.get("/all/{page}")
def get_images(
    page: int, done: Optional[Literal["0", "1"]] = Query(None)
) -> ImageListResponse:
    """
    Get a paginated list of images.

    Args:
        page: Page number
        done: Filter by completion status (0 for incomplete, 1 for complete)
    """
    session = SessionLocal()
    try:
        page_size = 10
        db_images, db_count = image_service.get_images_by_done_status(
            session,
            (int(done) if done else 0),
            offset=(page - 1) * page_size,
            limit=page_size,
        )

        api_images = [
            ApiImage(
                id=img.id,
                filename=img.filename,
                src=image_service.ToBase64(img.img_path),
                is_done=False,
            )
            for img in db_images
        ]
        return {"images": api_images, "page": page, "total": db_count}
    finally:
        session.close()


@router.post("/upload")
def upload_image(image_data: ApiImage) -> ApiImage:
    """Upload a new image."""
    session = SessionLocal()
    try:
        return image_service.upload_image(session, image_data)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()


@router.delete("/delete/{image_id}")
def delete_image(image_id: int):
    """Delete an image and its associated files."""
    session = SessionLocal()
    try:
        image_service.delete_image(session, image_id)
        return {"message": "Image deleted successfully"}
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        session.close()

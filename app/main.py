# Generated by Copilot
from fastapi import FastAPI, HTTPException
from app.api.routes import ai, cells, image, mask, monitoring
from app.db.session import engine
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from app.services.ai.scheduler import scheduler
from app.core.db_init import setup_database
from app.core.init import backup_database
import logging

logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Database connection check
    try:
        with engine.connect() as connection:
            pass
        logger.info("Database connection successful")
    except Exception as e:
        # Log a single line error message without stacktrace
        error_msg = f"Could not connect to database: {e}"
        logger.error(error_msg)
        # Raise a simple exception with a concise message
        raise HTTPException(status_code=500, detail=error_msg)

    # Setup database - either restore from backup or initialize fresh
    await setup_database()

    # Start the model training scheduler
    scheduler.start()

    yield

    # Cleanup
    if scheduler.is_running:
        scheduler.stop()

    # Create backup before shutdown
    if backup := backup_database():
        logger.info(f"Created shutdown backup at: {backup}")
    else:
        logger.error("Failed to create shutdown backup")


app = FastAPI(lifespan=lifespan)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # TODO: Configure this for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(ai.router, prefix="/ai", tags=["ai"])
app.include_router(cells.router, prefix="/cells", tags=["cells"])
app.include_router(image.router, prefix="/images", tags=["images"])
app.include_router(mask.router, prefix="/masks", tags=["masks"])
app.include_router(monitoring.router, prefix="/monitoring", tags=["monitoring"])


@app.get("/")
def read_root():
    return {"status": "ok", "message": "CrohnScope API is running"}

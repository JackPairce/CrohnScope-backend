# Generated by Copilot
from fastapi import FastAPI
from app.api.routes import ai, cells, image, mask, monitoring
from app.db.session import SessionLocal, engine
from app.db.models import Base
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from app.services.ai.train import RETRAINING_THRESHOLD, start_training_if_needed
from app.services.ai.scheduler import scheduler
from app.core.init import init_database, backup_database, restore_database
import os
import logging
from typing import Optional

logger = logging.getLogger(__name__)


def get_latest_backup(backup_dir: str) -> Optional[str]:
    """Find the most recent backup file in the given directory."""
    if not os.path.exists(backup_dir):
        return None
    backup_files = sorted(
        [f for f in os.listdir(backup_dir) if f.endswith(".json")], reverse=True
    )
    return os.path.join(backup_dir, backup_files[0]) if backup_files else None


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Database connection check
    try:
        with engine.connect() as connection:
            pass
        logger.info("Database connection successful")
    except Exception as e:
        # Log a single line error message without stacktrace
        error_msg = f"Could not connect to database: {e}"
        logger.error(error_msg)
        # Raise a simple exception with a concise message
        from fastapi import HTTPException

        raise HTTPException(status_code=500, detail=error_msg)

    # Always initialize fresh database first to ensure all files are processed
    await initialize_fresh_database()
    logger.info("Fresh database initialization completed")

    # Then try to restore from backup if exists to get any saved states
    backup_dir = "data/backups"
    latest_backup = get_latest_backup(backup_dir)

    if latest_backup:
        logger.info(f"Found latest backup: {latest_backup}")
        if restore_database(latest_backup):
            logger.info("Database state restored from backup successfully")
        else:
            logger.warning(
                "Failed to restore database state from backup, using fresh initialization"
            )
    else:
        logger.info("No backup found, using fresh initialization")

    # Start the model training scheduler
    scheduler.start()

    yield

    # Cleanup
    if scheduler.is_running:
        scheduler.stop()

    # Create backup before shutdown
    if backup := backup_database():
        logger.info(f"Created shutdown backup at: {backup}")
    else:
        logger.error("Failed to create shutdown backup")


async def initialize_fresh_database():
    """Initialize a fresh database with default data"""
    # Drop all tables and reinitialize the database
    logger.info("Initializing database schema...")
    Base.metadata.drop_all(bind=engine)
    Base.metadata.create_all(bind=engine)
    logger.info("Database schema initialized")

    # Initialize database with default data
    session = SessionLocal()
    try:
        logger.info("Starting database initialization with default data...")
        init_database(session)
        logger.info("Database initialized with default data")

        # Create initial backup
        logger.info("Creating initial database backup...")
        if backup := backup_database():
            logger.info(f"Created initial backup at: {backup}")
        else:
            logger.error("Failed to create initial backup")
    finally:
        session.close()


app = FastAPI(lifespan=lifespan)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # TODO: Configure this for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(ai.router, prefix="/ai", tags=["ai"])
app.include_router(cells.router, prefix="/cells", tags=["cells"])
app.include_router(image.router, prefix="/images", tags=["images"])
app.include_router(mask.router, prefix="/masks", tags=["masks"])
app.include_router(monitoring.router, prefix="/monitoring", tags=["monitoring"])


@app.get("/")
def read_root():
    return {"status": "ok", "message": "CrohnScope API is running"}
